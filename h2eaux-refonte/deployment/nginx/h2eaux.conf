# =============================================================================
# CONFIGURATION NGINX - H2EAUX GESTION PWA
# Fichier: /etc/nginx/sites-available/h2eaux-gestion
# =============================================================================

server {
    listen 80;
    server_name _;  # Remplacer par votre domaine en production
    
    # Variables
    set $app_root /home/deploy/h2eaux-gestion;
    
    # Logs
    access_log /var/log/nginx/h2eaux-access.log;
    error_log /var/log/nginx/h2eaux-error.log warn;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()";
    
    # HSTS (uniquement avec HTTPS)
    # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=30r/m;
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
    
    # =============================================================================
    # API BACKEND (FastAPI)
    # =============================================================================
    location /api/ {
        # Rate limiting pour API
        limit_req zone=api burst=10 nodelay;
        
        # Proxy vers backend FastAPI
        proxy_pass http://127.0.0.1:8001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # CORS headers (si nécessaire)
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
        add_header Access-Control-Allow-Credentials true always;
        
        # Gérer les requêtes OPTIONS pour CORS
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin $http_origin;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";
            add_header Access-Control-Allow-Credentials true;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }
    
    # API Login avec rate limiting strict
    location /api/auth/login {
        limit_req zone=login burst=3 nodelay;
        
        proxy_pass http://127.0.0.1:8001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Logs spéciaux pour login
        access_log /var/log/nginx/h2eaux-login.log;
    }
    
    # =============================================================================
    # PWA SERVICE WORKER
    # =============================================================================
    location ~* /sw.*\.js$ {
        root $app_root/frontend;
        
        # Headers spéciaux pour Service Worker
        add_header Content-Type application/javascript;
        add_header Service-Worker-Allowed "/";
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
        
        # CORS pour Service Worker
        add_header Access-Control-Allow-Origin $http_origin always;
        
        expires 0;
    }
    
    # =============================================================================
    # PWA MANIFEST
    # =============================================================================
    location ~* \.(webmanifest|manifest\.json)$ {
        root $app_root/frontend;
        
        # Content-Type correct pour PWA
        add_header Content-Type application/manifest+json;
        add_header Cache-Control "public, max-age=604800"; # 1 semaine
        
        expires 1w;
    }
    
    # =============================================================================
    # ASSETS STATIQUES AVEC CACHE
    # =============================================================================
    location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        root $app_root/frontend;
        
        # Cache long terme pour assets avec hash
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # Compression
        gzip_static on;
        
        # Fallback si fichier non trouvé
        try_files $uri =404;
    }
    
    # Images avec compression
    location ~* \.(png|jpg|jpeg|gif|webp)$ {
        root $app_root/frontend;
        expires 1M;
        add_header Cache-Control "public";
        add_header Vary "Accept-Encoding";
    }
    
    # =============================================================================
    # FRONTEND PWA (SPA)
    # =============================================================================
    location / {
        root $app_root/frontend;
        index index.html;
        
        # SPA fallback - crucial pour PWA
        try_files $uri $uri/ /index.html;
        
        # Headers PWA pour navigation
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
        
        # Sécurité
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-Content-Type-Options "nosniff";
    }
    
    # Page hors ligne spécifique
    location /offline.html {
        root $app_root/frontend;
        internal;
        add_header Cache-Control "no-cache";
    }
    
    # =============================================================================
    # SÉCURITÉ ET RESTRICTIONS
    # =============================================================================
    
    # Bloquer accès aux fichiers sensibles
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ \.(env|git|svn|hg)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Bloquer certains user agents
    if ($http_user_agent ~* (bot|crawler|spider|scraper) ) {
        return 403;
    }
    
    # =============================================================================
    # GZIP COMPRESSION
    # =============================================================================
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied expired no-cache no-store private must-revalidate no_last_modified no_etag auth;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        application/manifest+json;
    
    # =============================================================================
    # PAGES D'ERREUR PERSONNALISÉES
    # =============================================================================
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        root $app_root/frontend;
        internal;
    }
    
    location = /50x.html {
        root $app_root/frontend;
        internal;
    }
    
    # =============================================================================
    # HEALTH CHECK NGINX
    # =============================================================================
    location /nginx-health {
        access_log off;
        return 200 "nginx healthy\n";
        add_header Content-Type text/plain;
    }
}

# =============================================================================
# CONFIGURATION HTTPS (À activer avec certbot)
# =============================================================================
# server {
#     listen 443 ssl http2;
#     server_name votre-domaine.com www.votre-domaine.com;
#     
#     # Certificats SSL (générés par certbot)
#     ssl_certificate /etc/letsencrypt/live/votre-domaine.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/votre-domaine.com/privkey.pem;
#     
#     # Configuration SSL moderne
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
#     ssl_prefer_server_ciphers on;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#     
#     # HSTS
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
#     
#     # Redirection HTTP vers HTTPS
#     add_header Content-Security-Policy "upgrade-insecure-requests";
#     
#     # Inclure la configuration ci-dessus...
# }
# 
# # Redirection HTTP vers HTTPS
# server {
#     listen 80;
#     server_name votre-domaine.com www.votre-domaine.com;
#     return 301 https://$server_name$request_uri;
# }